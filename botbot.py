import gspread
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ContentType, KeyboardButton, Message
from aiogram.filters import Command
from oauth2client.service_account import ServiceAccountCredentials
import asyncio
from datetime import datetime, timedelta
import os
import json
import pytz
from aiogram.client.bot import DefaultBotProperties

note_stat = {}
UA_TZ = pytz.timezone("Europe/Kyiv")  # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —á–∞—Å

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ Google Sheets
SCOPE = ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/drive"]

creds_dict = json.loads(os.getenv("GOOGLE_CREDS_JSON"))
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, SCOPE)
client = gspread.authorize(creds)

# –í—ñ–¥–∫—Ä–∏—Ç—Ç—è Google —Ç–∞–±–ª–∏—Ü—ñ
sheet = client.open_by_key('1lCdMi8FrukmA5qNEgK7bpwEFQpgLcp-qTp5DNWUsEgs')
worksheet = sheet.get_worksheet(0)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN not found in environment variables")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()
state_day_start = {}

KEEPALIVE_BOT_URL = "https://your-keepalive-bot.onrender.com/ping"


@dp.message(Command("ping"))
async def handle_ping(message: types.Message):
    pass


async def add_date(callback: types.CallbackQuery):
    rows = worksheet.get_all_values()
    user_id = callback.from_user.id
    if rows and rows[-1][0] == '*':
        today_str = datetime.now(UA_TZ).strftime("%d.%m.%Y")
        state_day_start["date"] = today_str
        today = datetime.strptime(today_str, "%d.%m.%Y")
        date_p_17 = (today + timedelta(days=17)).strftime("%d.%m.%Y")
        worksheet.append_row([None, today_str, None, date_p_17])
        await callback.answer("‚úÖ–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω–∞‚úÖ")
        await callback.message.answer("‚úÖ –î–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—é!")
        note_stat[user_id] = 1
        await callback.message.answer("–Ø–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è—î—Ü—å –±—É–ª–æ –∑–∞–∫–ª–∞–¥–µ–Ω–æ?\n(–ù–∞–ø–∏—à—ñ—Ç—å –ª–∏—à–µ —á–∏—Å–ª–æ)")
    else:
        await callback.answer("‚ùå–ü–æ–º–∏–ª–∫–∞‚ùå")
        await callback.message.answer("‚ùå–ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —ñ–Ω–∫—É–±–∞—Ç–æ—Ä—ñ–≤!")


@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ú–µ–Ω—é")]],
        resize_keyboard=True
    )
    await message.answer('–ü—Ä–∏–≤—ñ—Ç, —Ü–µ –±–æ—Ç –º—ñ–Ω—ñ—Ñ–µ—Ä–º–∏ "–°—Ç–µ–ø–æ–≤–∞ –ø–µ—Ä–µ–ø—ñ–ª–∫–∞"', reply_markup=keyboard)


async def send_note(user_id: int, message: types.Message, bot: Bot):
    rows = worksheet.get_all_values()
    czus = message.text
    last_row_index = len(rows)
    worksheet.update_cell(last_row_index, 5, czus)
    today_str = datetime.now(UA_TZ).strftime("%d.%m.%Y")
    state_day_start["date"] = today_str
    today = datetime.strptime(today_str, "%d.%m.%Y")
    date_p_17 = (today + timedelta(days=17)).strftime("%d.%m.%Y")
    await bot.send_message(user_id, f"–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –¥–∞—Ç–∞ –≤–∏–ª—É–ø—É: {date_p_17}")


@dp.callback_query(lambda c: c.data in ["add_date", "Arrngmnt"])
async def process_button(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    if callback.data == "add_date":
        await add_date(callback)
    """elif callback.data == "Arrngmnt":
        t = await Arrangement()
        await bot.send_message(user_id, f"–†–æ–∑–º—ñ—â–µ–Ω–Ω—è –ø–µ—Ä–µ–ø–µ–ª—ñ–≤", reply_markup=t)"""

menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–ø—É—Å–∫ —ñ–Ω–∫—É–±–∞—Ç–æ—Ä–∞",
                              callback_data="add_date")]
    ]
)


@dp.message(F.text.lower() == "–º–µ–Ω—é")
async def reply_action(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    await bot.send_message(user_id, "–û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=menu)


@dp.message(lambda message: message.content_type == ContentType.TEXT)
async def handle_text(message: Message, bot: Bot):
    user_id = message.from_user.id
    if user_id not in note_stat:
        note_stat[user_id] = 0
    if note_stat[user_id] == 1:
        await send_note(user_id, message, bot)
        note_stat[user_id] = 0


async def on_startup():
    print("–ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–ø—É—â–µ–Ω–∞. –í–∏–∫–æ–Ω–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó...")
    rows = worksheet.get_all_values()
    if rows:
        last_row = rows[-1]
        state_day_start["date"] = last_row[1]
        print("–û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å:", last_row[1])


async def check_periodically(bot: Bot):
    users = {1: 1030040998}
    while True:
        now = datetime.now(UA_TZ)

        # –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ –¥–µ–Ω—å –¥–æ –≤ –æ–±—ñ–¥

        if now.hour == 12 and now.minute == 00:
            if "date" in state_day_start:
                print(f"–ß–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏! –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç—É: {state_day_start['date']}")
                saved_date = datetime.strptime(
                    state_day_start["date"], "%d.%m.%Y")
                today_str = now.strftime("%d.%m.%Y")
                date_plus_8 = (saved_date + timedelta(days=9)
                               ).strftime("%d.%m.%Y")
                date_plus_14 = (saved_date + timedelta(days=15)
                                ).strftime("%d.%m.%Y")
                date_plus_17 = (saved_date + timedelta(days=18)
                                ).strftime("%d.%m.%Y")

                if date_plus_8 == today_str:
                    print("‚úÖ –î–∞—Ç–∞ –∑–±—ñ–≥–∞—î—Ç—å—Å—è! –°—å–æ–≥–æ–¥–Ω—ñ 8-–π –¥–µ–Ω—å.")
                    for CHAT_ID in users.values():
                        await bot.send_message(CHAT_ID, "–°—å–æ–≥–æ–¥–Ω—ñ 8-–π –¥–µ–Ω—å —ñ–Ω–∫—É–±–∞—Ü—ñ—ó, –∑–∞–≤—Ç—Ä–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º–µ–Ω—à–∏—Ç–∏ –≤–æ–ª–æ–≥—É –¥–æ 40% —Ç–∞ –ø–æ—á–∞—Ç–∏ –ø—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞—Ç–∏ —ñ–Ω–∫—É–±–∞—Ç–æ—Ä")
                elif date_plus_14 == today_str:
                    print("‚úÖ –î–∞—Ç–∞ –∑–±—ñ–≥–∞—î—Ç—å—Å—è! –°—å–æ–≥–æ–¥–Ω—ñ 14-–π –¥–µ–Ω—å.")
                    for CHAT_ID in users.values():
                        await bot.send_message(CHAT_ID, "–°—å–æ–≥–æ–¥–Ω—ñ 14-–π –¥–µ–Ω—å —ñ–Ω–∫—É–±–∞—Ü—ñ—ó, –∑–∞–≤—Ç—Ä–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º–µ–Ω—à–∏—Ç–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–æ 37.4, –∑–±—ñ–ª—å—à–∏—Ç–∏ –≤–æ–ª–æ–≥—É –¥–æ 75-80% —Ç–∞ –≤–∏–∫–ª–∞—Å—Ç–∏ —è–π—Ü—è –Ω–∞ –¥–Ω–æ —ñ–Ω–∫—É–±–∞—Ç–æ—Ä–∞")
                elif date_plus_17 == today_str:
                    print("‚úÖ –î–∞—Ç–∞ –∑–±—ñ–≥–∞—î—Ç—å—Å—è! –°—å–æ–≥–æ–¥–Ω—ñ 17-–π –¥–µ–Ω—å.")
                    for CHAT_ID in users.values():
                        await bot.send_message(CHAT_ID, "–°—å–æ–≥–æ–¥–Ω—ñ 17-–π –¥–µ–Ω—å —ñ–Ω–∫—É–±–∞—Ü—ñ—ó, —Å–∫–æ—Ä–æ –ø–æ—á–Ω–µ—Ç—å—Å—è –≤–∏–ª—É–øü•≥")
                else:
                    print("‚ùå –î–∞—Ç–∞ –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è.")
            else:
                print("–ß–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏! –ê–ª–µ –¥–∞—Ç–∏ –Ω–µ–º–∞—î.")

        # –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç–æ–π –¥–µ–Ω—å –∑—Ä–∞–Ω–∫—É

        elif now.hour == 8 and now.minute == 00:
            if "date" in state_day_start:
                print(f"–ß–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏! –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç—É: {state_day_start['date']}")
                saved_date = datetime.strptime(
                    state_day_start["date"], "%d.%m.%Y")
                today_str = now.strftime("%d.%m.%Y")
                date_plus_9 = (saved_date + timedelta(days=9)
                               ).strftime("%d.%m.%Y")
                date_plus_15 = (saved_date + timedelta(days=15)
                                ).strftime("%d.%m.%Y")
                date_plus_18 = (saved_date + timedelta(days=18)
                                ).strftime("%d.%m.%Y")

                if date_plus_9 == today_str:
                    print("‚úÖ –î–∞—Ç–∞ –∑–±—ñ–≥–∞—î—Ç—å—Å—è! –°—å–æ–≥–æ–¥–Ω—ñ 9-–π –¥–µ–Ω—å.")
                    for CHAT_ID in users.values():
                        await bot.send_message(CHAT_ID, "–°—å–æ–≥–æ–¥–Ω—ñ 9-–π –¥–µ–Ω—å —ñ–Ω–∫—É–±–∞—Ü—ñ—ó, –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º–µ–Ω—à–∏—Ç–∏ –≤–æ–ª–æ–≥—É –¥–æ 40% —Ç–∞ –ø–æ—á–∞—Ç–∏ –ø—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞—Ç–∏ —ñ–Ω–∫—É–±–∞—Ç–æ—Ä")
                elif date_plus_15 == today_str:
                    print("‚úÖ –î–∞—Ç–∞ –∑–±—ñ–≥–∞—î—Ç—å—Å—è! –°—å–æ–≥–æ–¥–Ω—ñ 15-–π –¥–µ–Ω—å.")
                    for CHAT_ID in users.values():
                        await bot.send_message(CHAT_ID, "–°—å–æ–≥–æ–¥–Ω—ñ 15-–π –¥–µ–Ω—å —ñ–Ω–∫—É–±–∞—Ü—ñ—ó, –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º–µ–Ω—à–∏—Ç–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–æ 37.4, –∑–±—ñ–ª—å—à–∏—Ç–∏ –≤–æ–ª–æ–≥—É –¥–æ 75-80% —Ç–∞ –≤–∏–∫–ª–∞—Å—Ç–∏ —è–π—Ü—è –Ω–∞ –¥–Ω–æ —ñ–Ω–∫—É–±–∞—Ç–æ—Ä–∞")
                elif date_plus_18 == today_str:
                    print("‚úÖ –î–∞—Ç–∞ –∑–±—ñ–≥–∞—î—Ç—å—Å—è! –°—å–æ–≥–æ–¥–Ω—ñ 18-–π –¥–µ–Ω—å.")
                    for CHAT_ID in users.values():
                        await bot.send_message(CHAT_ID, "–°—å–æ–≥–æ–¥–Ω—ñ 18-–π –¥–µ–Ω—å —ñ–Ω–∫—É–±–∞—Ü—ñ—ó, –¥–µ–Ω—å –≤–∏–ª—É–ø—Éü•≥")
                    rows = worksheet.get_all_values()
                    last_row_index = len(rows)
                    worksheet.update_cell(last_row_index, 1, "*")
                else:
                    print("‚ùå –î–∞—Ç–∞ –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è.")
            else:
                print("–ß–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏! –ê–ª–µ –¥–∞—Ç–∏ –Ω–µ–º–∞—î.")

        # –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç–æ–π –¥–µ–Ω—å –≤–≤–µ—á–µ—Ä—ñ

        elif now.hour == 21 and now.minute == 00:
            if "date" in state_day_start:
                print(f"–ß–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏! –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç—É: {state_day_start['date']}")
                saved_date = datetime.strptime(
                    state_day_start["date"], "%d.%m.%Y")
                today_str = now.strftime("%d.%m.%Y")
                date_plus_9 = (saved_date + timedelta(days=9)
                               ).strftime("%d.%m.%Y")
                date_plus_15 = (saved_date + timedelta(days=15)
                                ).strftime("%d.%m.%Y")

                if date_plus_9 == today_str:
                    print("‚úÖ –î–∞—Ç–∞ –∑–±—ñ–≥–∞—î—Ç—å—Å—è! –°—å–æ–≥–æ–¥–Ω—ñ 9-–π –¥–µ–Ω—å.")
                    for CHAT_ID in users.values():
                        await bot.send_message(CHAT_ID, "–°—å–æ–≥–æ–¥–Ω—ñ 9-–π –¥–µ–Ω—å —ñ–Ω–∫—É–±–∞—Ü—ñ—ó, –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º–µ–Ω—à–∏—Ç–∏ –≤–æ–ª–æ–≥—É –¥–æ 40% —Ç–∞ –ø–æ—á–∞—Ç–∏ –ø—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞—Ç–∏ —ñ–Ω–∫—É–±–∞—Ç–æ—Ä")
                elif date_plus_15 == today_str:
                    print("‚úÖ –î–∞—Ç–∞ –∑–±—ñ–≥–∞—î—Ç—å—Å—è! –°—å–æ–≥–æ–¥–Ω—ñ 15-–π –¥–µ–Ω—å.")
                    for CHAT_ID in users.values():
                        await bot.send_message(CHAT_ID, "–°—å–æ–≥–æ–¥–Ω—ñ 15-–π –¥–µ–Ω—å —ñ–Ω–∫—É–±–∞—Ü—ñ—ó, –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º–µ–Ω—à–∏—Ç–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–æ 37.4, –∑–±—ñ–ª—å—à–∏—Ç–∏ –≤–æ–ª–æ–≥—É –¥–æ 75-80% —Ç–∞ –≤–∏–∫–ª–∞—Å—Ç–∏ —è–π—Ü—è –Ω–∞ –¥–Ω–æ —ñ–Ω–∫—É–±–∞—Ç–æ—Ä–∞")
                else:
                    print("‚ùå –î–∞—Ç–∞ –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è.")
            else:
                print("–ß–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏! –ê–ª–µ –¥–∞—Ç–∏ –Ω–µ–º–∞—î.")

        await asyncio.sleep(60)


async def main():
    await on_startup()
    asyncio.create_task(check_periodically(bot))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
